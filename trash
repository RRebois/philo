/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   trash                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: rrebois <rrebois@student.42lyon.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/07/12 08:56:02 by rrebois           #+#    #+#             */
/*   Updated: 2023/07/13 07:56:20 by rrebois          ###   ########lyon.fr   */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	convert_time(struct timeval time, t_philo *philo, int i)
// {
// 	int	converted_time;

// 	converted_time = time.tv_sec * 1000 + time.tv_usec / 1000;
// 	if (i == 2)
// 	{
// 		philo->act_time = converted_time - philo->s_time;
// 		return (philo->act_time);
// 	}
// 	else if (i == 1)
// 	{
// 		philo->act_time = converted_time - philo->s_time;
// 		philo->last_meal = converted_time - philo->s_time;
// 		return (philo->last_meal);
// 	}
// 	return (converted_time);
// }



static void	philo_check_mate(t_philo *philo)
{
	int	i;

	if (philo->number < philo->data->philo_count)
	{
		i = philo->number;
		philo_eat(philo, &philo->data->philos[i]);
	}
	else
	{
		i = 0;
		philo_eat(philo, &philo->data->philos[i]);
	}
}

void	check_death(t_philo *philo)
{
	gettimeofday(&philo->cur_t, NULL);
	convert_time(philo->cur_t, philo, 2);
	if (philo->act_time - philo->last_meal > philo->data->t_die)
	{
		if (pthread_mutex_lock(&philo->data->death) == 0 && \
		pthread_mutex_lock(&philo->data->print) == 0)
		{
			philo->data->stop = 1;
			printf("%d %d died\n", philo->act_time, philo->number);
			pthread_mutex_unlock(&philo->data->print);
			pthread_mutex_unlock(&philo->data->death);
			return ;
		}
	}
	// if (philo->data->t_die < philo->last_meal + philo->data->t_eat)
	// {
	// 	if (pthread_mutex_lock(&philo->data->death) == 0)
	// 	{
	// 		philo->data->stop = 1;
	// 		if (pthread_mutex_lock(&philo->data->print) != 0)
	// 		{
	// 			printf("%d %d died\n", philo->act_time, philo->number);
	// 			pthread_mutex_unlock(&philo->data->print);
	// 		}
	// 		pthread_mutex_unlock(&philo->data->death);
	// 		return ;
	// 	}
	// 	else
	// 		check_death(philo) ;
	// }
}

void	*routine(void *philo_struct)
{
	t_philo	*philo;

	philo = (t_philo *)philo_struct;

	// Real routine starting now
	while (1)
	{
		// if (pthread_mutex_lock(&philo->data->death) == 0)
		// {
		// 	if (philo->data->stop == 1)
		// 	{
		// 		pthread_mutex_unlock(&philo->data->death);
		// 		pthread_mutex_destroy(&philo->fork);
		// 		return (philo_struct);
		// 	}
		// 	pthread_mutex_unlock(&philo->data->death);
		// }
		check_death(philo);
		philo_check_mate(philo);
		philo_sleep(philo);
		philo_think(philo);
	}
	return (philo_struct);
}

void	philo_think(t_philo *philo)
{
	int	i;

	i = philo->act_time;
	if (pthread_mutex_lock(&philo->data->print) == 0)
	{
		if (pthread_mutex_lock(&philo->data->death) == 0)
		{
			if (philo->data->stop == 0)
				printf("%d %d is thinking\n", philo->act_time, philo->number);
		}
		else
		{
			// pthread_mutex_unlock(&philo->data->death);
			// pthread_mutex_unlock(&philo->data->print);
			return ;
		}
	}
	pthread_mutex_unlock(&philo->data->death);
	pthread_mutex_unlock(&philo->data->print);
	return ;
}

void	philo_sleep(t_philo *philo)
{
	if (pthread_mutex_lock(&philo->data->print) == 0)
	{
		if (pthread_mutex_lock(&philo->data->death) == 0)
		{
			if (philo->data->stop == 0)
				printf("%d %d is sleeping\n", philo->act_time, philo->number);
		}
		else
		{
			pthread_mutex_unlock(&philo->data->death);
			pthread_mutex_unlock(&philo->data->print);
			return ;
		}
	}
	pthread_mutex_unlock(&philo->data->death);
	pthread_mutex_unlock(&philo->data->print);
	adjust_time(philo, philo->data->t_sleep);
}

void	philo_eat(t_philo *philo, t_philo *mate)
{
	if (pthread_mutex_lock(&philo->fork) == 0 && \
	pthread_mutex_lock(&mate->fork) == 0)
	{
		gettimeofday(&philo->cur_t, NULL);
		philo->last_meal = convert_time(philo->cur_t, philo, 1);
		if (pthread_mutex_lock(&philo->data->print) == 0 && \
		pthread_mutex_lock(&philo->data->death) == 0)
		{
			if (philo->data->stop == 0)
			{
				printf("%d %d has taken a fork\n", philo->last_meal, philo->number);
				printf("%d %d has taken a fork\n", philo->last_meal, philo->number);
				printf("%d %d is eating\n", philo->last_meal, philo->number);
				usleep(10);
				adjust_time(philo, philo->data->t_eat);
	// if (pthread_mutex_lock(&philo->data->print) == 0)
	// 	printf("%d %d stop eating\n", philo->act_time, philo->number);
	// pthread_mutex_unlock(&philo->data->print);
			}
			pthread_mutex_unlock(&philo->data->print);
			pthread_mutex_unlock(&philo->fork);
			pthread_mutex_unlock(&mate->fork);
			pthread_mutex_unlock(&philo->data->death);
		}
	}
}
